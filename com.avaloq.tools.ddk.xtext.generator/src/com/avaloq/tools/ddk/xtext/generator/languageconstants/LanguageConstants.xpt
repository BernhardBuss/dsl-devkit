«IMPORT org::eclipse::xtext»

«EXTENSION org::eclipse::xtext::generator::Naming»
«EXTENSION org::eclipse::xtext::GrammarUtil»
«EXTENSION com::avaloq::tools::ddk::xtext::generator::languageconstants::LanguageConstantsFragment»

«DEFINE generateConstantsClass(String preferredFileExtension, List[String] fileExtensions) FOR Grammar -»
«FILE getQualifiedName("").asPath()+".java" SRC_GEN -»
package «getQualifiedName("").toJavaPackage()»;

/**
 * Provides language specific constants for «this.name».
 *
 * Theses constants are used e.g. by the test plug-ins.
 */
@SuppressWarnings("nls")
public final class «getQualifiedName("").toSimpleName()» {
  public static final String GRAMMAR = "«this.name»";
«IF fileExtensions.size==0-»
  «ERROR "There must be at least one extension for "+this.name -»
«ENDIF -»

  /** Preferred file extension (for testing). */
  public static final String FILE_EXTENSION = "«preferredFileExtension.replaceAll("%20"," ")»";
  /** All file extensions. */
  public static final String FILE_EXTENSIONS = "«",".join(fileExtensions)»";
  /** Private constant specifying an URI pattern that match all files of the preferred extension. */
  private static final String ALL_«this.getName().toUpperCase()»_URI = "*."+FILE_EXTENSION;

  private «getQualifiedName("").toSimpleName()»() {}
  
  /** 
   * An URI pattern that matches all files of the preferred file extension.
   *
   * @return this pattern
   */
  public static final String getAll«this.getName()»URI() {
    return ALL_«this.getName().toUpperCase()»_URI;
  }

}
«ENDFILE -»
«ENDDEFINE»

«DEFINE generateConstantsExtension FOR Grammar -»
«FILE getQualifiedName("").asPath()+".ext" METAMODEL_SRC_GEN -»

String getAll«this.getName()»URI():
  JAVA «getQualifiedName("")».getAll«this.getName()»URI()
;
«ENDFILE -»
«ENDDEFINE»