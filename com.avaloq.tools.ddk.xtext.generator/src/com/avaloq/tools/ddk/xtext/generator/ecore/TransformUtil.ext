/*******************************************************************************
 * Copyright (c) 2016 Avaloq Evolution AG and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Avaloq Evolution AG - initial API and implementation
 *******************************************************************************/

import xtext;
import ecore;

extension org::eclipse::xtend::util::stdlib::io;

// *** Lookup Operations ***

// Finds the class named name in this EPackage.
EClass lookupClass(EPackage this, String name) :
    this.eClassifiers.typeSelect(EClass).selectFirst(c|c.name == name)
;

//Finds the class named className in the package packageName in this grammar
cached EClass lookupClass(Grammar this, String packageName, String className) :
  JAVA com.avaloq.tools.ddk.xtext.generator.ecore.TransformUtil.lookupEClass(org.eclipse.xtext.Grammar, java.lang.String, java.lang.String)
;

// Finds the feature named featureName in the class named className in this EPackage.
EStructuralFeature lookupFeature(EPackage this, String className, String featureName) :
    lookupClass(className).lookupFeature(featureName)
;

// Finds the feature named featureName in the given eClass.
EStructuralFeature lookupFeature (EClass this, String featureName) :
    this.eAllStructuralFeatures.selectFirst(f|f.name == featureName)
;

// Finds the structural features of this eClass the type of which corresponds to the given parameter.
List[EStructuralFeature] lookupFeatures (EClass this, EDataType type) :
   this.eStructuralFeatures.select(f|f.eType == type)
;

// Finds the (first) reference named referenceName in this eClass.
EReference lookupReference (EClass this, String referenceName) :
   this.eAllReferences.selectFirst(r|r.name == referenceName)
;

// Returns the corresponding EDataType instance if mapped name, else null
// Mapped names are "EString", "EInt", "EIntegerObject", "EBoolean", "EBooleanObject", "EChar", "ELong", "EShort", "EDouble", "EDate", "EFloat"
// Note that the use of EBooleanObject is strictly discouraged, since we want to avoid 3-states logic.
EDataType lookupDataType(EPackage this, String name) :
    this.eClassifiers.typeSelect(EDataType).selectFirst(c|c.name == name)
;

// returns the ECore datatype corresponding to the given name.
// Supported type names are "EString", "EInt", "EIntegerObject", "EBoolean", "EBooleanObject", "EChar", "ELong", "EShort", "EDouble", "EDate", "EFloat"
// The recommanded syntax is e.g. "EString".lookupEcoreDataType()
EDataType lookupEcoreDataType(String typeName):
    JAVA com.avaloq.tools.ddk.xtext.generator.ecore.TransformUtil.mapType(java.lang.String)
;


// *** EClass Operations ***

// Adds a class named name in this EPackage.
EClass addEClass (EPackage this, String name) :
    let clazz = new EClass :
        clazz.setName(name)
        -> eClassifiers.add (clazz)
        -> clazz
;


// *** EReference Operations ***

EReference addReference(EClass this, String name, EClass target) :
    let reference = new EReference :
        reference.setEType(target)
        -> reference.setName(name)
        -> this.eStructuralFeatures.add(reference)
        -> reference
;

// Add an EReference with specified name from this eClass to target eClass.
// The EReference has containment, transient, not unsettable and not changable.
EReference addContainmentReference(EClass this, String name, EClass target) :
      let reference = this.addReference(name, target) :
        reference.setContainment(true)
        -> reference.setTransient(true)
        -> reference.setUnsettable(false)
        -> reference.setChangeable(false)
        -> reference
;

// Add an EReference with specified name from this eClass to target eClass.
// The EReference has containment, transient, not unsettable and not changable.
EReference addChangeableContainmentReference(EClass this, String name, EClass target) :
      let reference = this.addReference(name, target) :
        reference.setContainment(true)
        -> reference.setTransient(true)
        -> reference.setUnsettable(false)
        -> reference.setChangeable(true)
        -> reference
;

// Add a derived EReference with specified name from this eClass to target eClass.
// A derived EReference is derived, volatile, transient and not changable.
EReference addDerivedReference(EClass this, String name, EClass target) :
    let reference = this.addReference(name, target) :
        reference.setDerived(true)
        -> reference.setVolatile(true)
        -> reference.setTransient(true)
        -> reference.setChangeable(false)
        -> reference
;

// Unbounded variant of addDerivedReference. (The upper bound is not limited, e.g. it corresponds to List of references.)
EReference addUnboundedDerivedReference(EClass this, String name, EClass target) :
    let reference = this.addDerivedReference(name, target) :
      reference.setUpperBound(-1)
      -> reference
;

// Add a derived EReference with specified name from this EClass to EClass named targetname.
// A derived EReference is derived, volatile, transient and not changable.
// Please prefer the addDerivedReference operation above, as this operation is weakly typed.
EReference addDerivedReference(EClass this, String name, String targetName) :
    let clazz = this.ePackage.eClassifiers.typeSelect(EClass).selectFirst(c | c.name == targetName) :
        (clazz != null
            ? this.addDerivedReference(name, clazz)
            : error("addDerivedReference: no such target element \"" + targetName + "\"")
         )
;

// Unbounded variant of addDerivedReference. (The upper bound is not limited, e.g. it corresponds to List of references.)
EReference addUnboundedDerivedReference(EClass this, String name, String targetName) :
    let reference = addDerivedReference(this, name, targetName) :
      reference.setUpperBound(-1)
      -> reference
;

EReference addOppositeContainerReference(EClass this, String name, EStructuralFeature containmentRef) :
    addOppositeContainerReference(this, name, (EReference) containmentRef)
;

EReference addOppositeContainerReference(EClass this, String name, EReference containmentRef) :
    let reference = this.addReference(name, containmentRef.eContainingClass) :
        reference.setEOpposite(containmentRef)
        -> containmentRef.setEOpposite(reference)
        -> reference.setChangeable(false)
        -> reference.setResolveProxies(false)
        -> reference
;

// Marks the specified EReference as an on-demand reference
markAsOnDemandReference(EClass this, String name) :
    ((EReference) getEStructuralFeature(name)).markAsOnDemand()
;

// Marks the specified EReference as an on-demand reference
EReference markAsOnDemand(EReference this) :
    setAnnotation("DDK", "kind", "on-demand") ->
    this
;

// *** EAttribute Operations ***

// Add a derived EAttribute with specified attrName and type to this EClass.
// A derived EAttribute is derived, volatile, transient and not changable.
EAttribute addDerivedAttribute(EClass this, String attrName, EDataType type) :
    let attribute = new EAttribute :
        attribute.setName(attrName)
        -> attribute.setEType(type)
        -> attribute.setDerived(true)
        -> attribute.setVolatile(true)
        -> attribute.setTransient(true)
        -> attribute.setChangeable(false)
        -> this.eStructuralFeatures.add(attribute)
        -> attribute
;

// Unbounded Variant of addDerivedAttribute.  (The upper bound is not limited, e.g. it corresponds to List of attributes.)
EAttribute addUnboundedDerivedAttribute(EClass this, String attrName, EDataType type) :
    let attribute = this.addDerivedAttribute (attrName, type) :
        attribute.setUpperBound(-1)
        -> attribute
;

// Set the default value literal of the attribute named attrName in this EClass to specified value
setAttributeDefaultValue(EClass this, String attrName, String value) :
    let attribute = eAttributes.selectFirst(a | a.name == attrName) :
        (attribute != null
            ? attribute.setDefaultValueLiteral(value)
            : error("setAttributeDefaultValue: Eclass \"" + this.name
                     + "\" has no attribute named \"" + attrName + "\"")
         )
;

// Add a transient EAttribute with specified attrName and type to this EClass.
// A transient EAttribute is non-derived, non-volatile, transient and changeable.
EAttribute addTransientAttribute(EClass this, String attrName, EDataType type) :
    let attribute = new EAttribute :
        attribute.setName(attrName)
        -> attribute.setEType(type)
        -> attribute.setDerived(false)
        -> attribute.setVolatile(false)
        -> attribute.setTransient(true)
        -> attribute.setChangeable(true)
        -> this.eStructuralFeatures.add(attribute)
        -> attribute
;

// Unbounded variant
EAttribute addUnboundedTransientAttribute(EClass this, String attrName, EDataType type) :
    let attribute = this.addTransientAttribute(attrName, type) :
        attribute.setUpperBound(-1)
        -> attribute
;


// *** EOperation Operations ***

// Add an operation with specified name and return type to this Eclass.
// To specify a void operation, set the returnType to null.
EOperation addOperation(EClass this, String name, EClassifier returnType) :
    newOperation(name, returnType)
;

EOperation addUnboundedOperation (EClass this, String name, EClassifier returnType) :
   let operation = newOperation (name, returnType) :
       operation.setUpperBound(-1)
       -> operation
;

// Add a parameter to an operation.
// For parameter multiplicities 0..1 are used, as is the default in ecore model editor.
EParameter addParameter(EOperation this, String name, EClassifier type) :
    this.addParameter(name, type, 0, 1)
;

// Add a parameter to an operation.
EParameter addParameter(EOperation this, String name, EClassifier type, int lowerBound, int upperBound) :
    this.newParameter(name, type, lowerBound, upperBound)
;

// Set an explicit operation body - this replaces default body generated by JET.
EAnnotation setBody(EOperation this, String body) :
    this.getEAnnotation("http://www.eclipse.org/emf/2002/GenModel").details.replaceBody(body)
;

private replaceBody(EStringToStringMapEntry entry, String body) :
    entry.key == "body" ? entry.setValue(body) : null
    -> entry
;

private create EParameter newParameter(EOperation owner, String name, EClassifier type, int lowerBound, int upperBound) :
    setName(name)
    -> setEType(type)
    -> setLowerBound(lowerBound)
    -> setUpperBound(upperBound)
    -> owner.eParameters.add(this)
;

private EOperation newOperation(EClass owner, String name, EClassifier type) :
    let operation = new EOperation :
    operation.setName(name)
    -> operation.setEType(type)
    -> owner.eOperations.add(operation)
    -> operation
;

private newBodyAnnotation(EOperation owner, String body) :
    owner.setAnnotation("http://www.eclipse.org/emf/2002/GenModel", "body", body)
;


// *** Enum Operations ***

// Adds an enumerator named name in this EPackage.
EEnum addEnum(EPackage this, String name) :
    let eEnum = new EEnum :
        eEnum.setName(name)
    -> eClassifiers.add(eEnum)
    -> eEnum
;

EEnum addLiteral(EEnum eEnum, String name) :
    let literal = new EEnumLiteral : (
        literal.setName(name) ->
        literal.setLiteral(name) ->
        literal.setValue(eEnum.eLiterals.size)
    ) ->
    eEnum.eLiterals.add(literal) ->
    eEnum
;

private Void setEEnumsUnsettable(EClass this) :
  JAVA com.avaloq.tools.ddk.xtext.generator.ecore.TransformUtil.setEEnumsUnsettable(org.eclipse.emf.ecore.EClass)
;

// *** Other Operations ***

// Make Int and Boolean features serializable by forcing the unset-able property and specifying a default value litteral
makeDataTypesSerializable (EClass this):
       lookupFeatures("EInt".lookupEcoreDataType()).setUnsettable(true)
    -> lookupFeatures("EInt".lookupEcoreDataType()).setDefaultValueLiteral("0")
    -> lookupFeatures("EBoolean".lookupEcoreDataType()).setUnsettable(true)
    -> lookupFeatures("EBoolean".lookupEcoreDataType()).setDefaultValueLiteral("false")
    -> this.setEEnumsUnsettable()
;

// adds an EAnnotation to the given EModelElement
private Void setAnnotation(EModelElement this, String source, String key, String value) :
    JAVA org.eclipse.emf.ecore.util.EcoreUtil.setAnnotation(org.eclipse.emf.ecore.EModelElement, java.lang.String, java.lang.String, java.lang.String)
;
